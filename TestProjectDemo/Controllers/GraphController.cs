using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace TestProjectDemo.Controllers
{
    public class GraphController : Controller
    {
        //
        // GET: /Graph/

        public ActionResult Index()
        {
            ViewBag.str = ConvertHtmlToImage();
            string value = "10,20,20,30";

            // Use ToCharArray to convert string to array.

            var fooArray = value.Split(',');  // now you have an array of 3 strings
            value = String.Join(",", fooArray); // now you have the same as in the first line
            string[] stringArray = new string[] { value };
            // Loop through array.
            for (int i = 0; i < fooArray.Length; i++)
            {
                // Get character from array.
                string letter = fooArray[i];
                 
             
            }

            return View();
        }
        public IHtmlString ConvertHtmlToImage()
        {
            Bitmap m_Bitmap = new Bitmap(400, 600);
            PointF point = new PointF(0, 0);
            SizeF maxSize = new System.Drawing.SizeF(500, 500);
         
            IHtmlString str = new HtmlString("<a href='/Home/Profile/seeker'>seeker</a> has applied to <a href='/Jobs/Details/9'>Job</a> floated by you.</br>");
            //m_Bitmap.Save(@"C:\Test.png", ImageFormat.Png);
            return str;
        }
        public ActionResult UploadFile()
        {
            return View();
        }
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult UploadFile(HttpPostedFileBase httpPostedFile)
        {
           // var httpPostedFile = Request.Files[0];
            if (httpPostedFile != null)
            {

                // Validate the uploaded file if you want like content length(optional)

                // Get the complete file path
                var uploadFilesDir = System.Web.HttpContext.Current.Server.MapPath("~/Content/Videos");
                if (!Directory.Exists(uploadFilesDir))
                {
                    Directory.CreateDirectory(uploadFilesDir);
                }
                var fileSavePath = Path.Combine(uploadFilesDir, httpPostedFile.FileName);

                // Save the uploaded file to "UploadedFiles" folder
                httpPostedFile.SaveAs(fileSavePath);

            }

            return Content("Uploaded Successfully");
        }
        //public FileResult Download()
        //{
        //    string stringFromSQL = "0x530079007300740065006D002E0042007900740065005B005D00";
        //    List<byte> byteList = new List<byte>();

        //    string hexPart = stringFromSQL.Substring(2);
        //    for (int i = 0; i < hexPart.Length / 2; i++)
        //    {
        //        string hexNumber = hexPart.Substring(i * 2, 2);
        //        byteList.Add((byte)Convert.ToInt32(hexNumber, 16));
        //    }

        //    byte[] original = byteList.ToArray();
        //    //byte[] fileBytes = System.IO.File.ReadAllBytes(@"c:\folder\myfile.ext");
        //    string fileName = "Prerelase apps.docx";
        //    return File(original, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", fileName);
        //}

        public FileContentResult Download()
        {
            try
            {

                string stringFromSQL = "0x
                    List<byte> byteList = new List<byte>();

                    string hexPart = stringFromSQL.Substring(2);
                    for (int i = 0; i < hexPart.Length / 2; i++)
                    {
                        string hexNumber = hexPart.Substring(i * 2, 2);
                        byteList.Add((byte)Convert.ToInt32(hexNumber, 16));
                    }

                    byte[] original = byteList.ToArray();
                    //byte[] fileData;
                    string fileName;
                  
                    //fileData = (byte[])record.UploadFiles.ToArray();
                    fileName = "sample-file.pdf";

                    return File(original, "text", fileName);
                

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
